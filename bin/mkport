#!/bin/sh
#
# wildefyr - 2016 (c) MIT
# with thanks to:
# arianon - arianon at openmailbox dot org
# onodera - onodera at openmailbox dot org
#
# create a new crux port

PORTS=${PORTS:-/usr/ports}
USRPORT=${USRPORT:-wildefyr}
MAINTAINER=${MAINTAINER:-"wildefyr, me at wildefyr dot net"}

color() {
    printf '%s\n' "[7m[40m${@}[0m"
}

testPort() {
    test -d $PORTS/$USRPORT/$NAME && {
        test -f $NAME/Pkgfile && {
            prt-get edit $NAME
            verifyBuild
            exit
        } || {
            rm -rf $NAME
        }
    }
}

createPort() {
    mkdir $PORTS/$USRPORT/$NAME && cd $PORTS/$USRPORT/$NAME || exit 1
}

getPortInfo() {
    color "Enter 'git' to add a git source."
    printf '%s' "Version: "; while read -r version; do
        test -z "$version" && {
            color "Version cannot be empty."
            printf '%s' "Version: "
            continue
        }
        break
    done

    test "$version" = "git" && {
        printf '%s' "Git Source: "; while read -r gitsource; do
            test -z "$gitsource" && {
                color "Git Source cannot be empty."
                printf '%s' "Git Source: "
                continue
            }
            test "$(printf '%s\n' "$gitsource" | grep -E '(https?|git)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]')" || {
                color "Git Source does not have a valid URL."
                printf '%s' "Git Source: "
                continue
            }
            break
        done

        color "Leave blank for 'master' branch."
        printf '%s' "Branch: "; while read -r branch; do
            test -z "$branch" && {
                branch="master"
            }
            break
        done
    } || {
        printf '%s' "Source: "; while read -r source; do
            test -z "$source" && {
                color "Source cannot be empty."
                printf '%s' "Source: "
                continue
            }
            break
        done
    }

    printf '%s' "Description: "; while read -r description; do
        test -z "$description" && {
            color "Description cannot be empty."
            printf '%s' "Description: "
            continue
        }
        test -z "$(printf '%s\n' "$description" | grep -o "^[A-Z]")" && {
            description=$(printf '%s' "$description" | sed 's_^\(.\)_\U\1_')
            break
        }
        test -z "$(printf '%s\n' "$description" | grep -o "\.$")" && {
            description=$(printf '%s' "${description}.")
            break
        }
        break
    done

    test "$version" = "git" && description="$description (git checkout)"

    printf '%s' "URL: "; while read -r url; do
        test -z "$url" && {
            color "URL cannot be empty."
            printf '%s' "URL: "
            continue
        }
        test "$(printf '%s\n' "$url" | grep -E '(https?|git|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]')" || {
            color "URL is not valid."
            printf '%s' "URL: "
            continue
        }
        break
    done

    printf '%s' "Depends on: "; while read -r dependancies; do
        test -n "$(printf '%s\n' "$deps" | grep -o ",")" && {
            color "Dependencies should only be separated by a space."
            printf '%s' "Dependencies: "
            continue
        }
        break
    done

    test ! -z "$dependancies" && {
        test "$version" = "git" && {
            dependancies="  git $dependancies"
        } || {
            dependancies="  $dependancies"
        }
    } || {
        dependancies=""
    }
}

cdpkg() {
    TAB="$(printf '\t')"

    test "$version" = "git" && {
    cat << GIT
${TAB}cd \$PKGMK_SOURCE_DIR

${TAB}if cd \$name; then
${TAB}${TAB}git fetch -q && git reset --hard origin/\$branch
${TAB}${TAB}git clean -q -d -f
${TAB}else
${TAB}${TAB}git clone $gitsource -b \$branch \$name
${TAB}${TAB}cd \$name
${TAB}fi
GIT
    } || {
    cat << TARBALL
${TAB}cd \$name-\$version
TARBALL
    }
}

createPkgfile() {
    cat > "Pkgfile" << EOTEMPLATE
# Description: $description
# URL:         $url
# Maintainer:  $MAINTAINER
# Depends on:${dependencies}

name=$NAME
version=$version
release=1
source=($source)
$(test "$version" = "git" && printf '%s' "branch=$branch")

build() {
$(cdpkg)
}
EOTEMPLATE
}

verifyBuild() {
    prtverify $PORTS/$USRPORT/$NAME | grep -v "file not found"

    printf '%s' "Build package now? [Y/n]: "; read -r confirm
    test "$confirm" != "n" && {
        test "$(prt-get listinst | grep $NAME)" = "$NAME" && {
            sudo prt-get update $NAME -fr
        } || {
            sudo prt-get depinst $NAME
        }
    }
}

# take first argument as name
case $1 in
    h|-h|help|--help)
        printf '%s\n' "Usage: $(basename $0) [name] [directory]" >&2
        exit
        ;;
    *)
        test ! -z $1 && {
            NAME=$1
        } || {
            printf '%s' "Name: "; read -r NAME
        }
esac

# take second argument as port repository
test ! -z $2 && {
    USRPORT=$2
} || {
    test -z $USRPORT && {
        color "select port repository:"
        find $PORTS -maxdepth 1 -type d | cut -d/ -f 4 | sort
        printf '\n%s' "Port repository: "; read -r USRPORT
    }
}

testPort
getPortInfo
createPort

createPkgfile
prt-get cache
prt-get edit $NAME
verifyBuild
